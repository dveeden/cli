// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: interfaces.go

package mock

import (
	context "context"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v1_public "github.com/confluentinc/ccloud-sdk-go-v1-public"
)

// EnvironmentMetadata is a mock of EnvironmentMetadata interface
type EnvironmentMetadata struct {
	lockGet sync.Mutex
	GetFunc func(arg0 context.Context) ([]*github_com_confluentinc_ccloud_sdk_go_v1_public.CloudMetadata, error)

	calls struct {
		Get []struct {
			Arg0 context.Context
		}
	}
}

// Get mocks base method by wrapping the associated func.
func (m *EnvironmentMetadata) Get(arg0 context.Context) ([]*github_com_confluentinc_ccloud_sdk_go_v1_public.CloudMetadata, error) {
	m.lockGet.Lock()
	defer m.lockGet.Unlock()

	if m.GetFunc == nil {
		panic("mocker: EnvironmentMetadata.GetFunc is nil but EnvironmentMetadata.Get was called.")
	}

	call := struct {
		Arg0 context.Context
	}{
		Arg0: arg0,
	}

	m.calls.Get = append(m.calls.Get, call)

	return m.GetFunc(arg0)
}

// GetCalled returns true if Get was called at least once.
func (m *EnvironmentMetadata) GetCalled() bool {
	m.lockGet.Lock()
	defer m.lockGet.Unlock()

	return len(m.calls.Get) > 0
}

// GetCalls returns the calls made to Get.
func (m *EnvironmentMetadata) GetCalls() []struct {
	Arg0 context.Context
} {
	m.lockGet.Lock()
	defer m.lockGet.Unlock()

	return m.calls.Get
}

// Reset resets the calls made to the mocked methods.
func (m *EnvironmentMetadata) Reset() {
	m.lockGet.Lock()
	m.calls.Get = nil
	m.lockGet.Unlock()
}
