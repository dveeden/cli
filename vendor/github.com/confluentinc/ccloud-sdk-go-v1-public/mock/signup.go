// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: interfaces.go

package mock

import (
	context "context"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v1_public "github.com/confluentinc/ccloud-sdk-go-v1-public"
)

// Signup is a mock of Signup interface
type Signup struct {
	lockCreate sync.Mutex
	CreateFunc func(arg0 context.Context, arg1 *github_com_confluentinc_ccloud_sdk_go_v1_public.SignupRequest) (*github_com_confluentinc_ccloud_sdk_go_v1_public.SignupReply, error)

	lockSendVerificationEmail sync.Mutex
	SendVerificationEmailFunc func(arg0 context.Context, arg1 *github_com_confluentinc_ccloud_sdk_go_v1_public.User) error

	calls struct {
		Create []struct {
			Arg0 context.Context
			Arg1 *github_com_confluentinc_ccloud_sdk_go_v1_public.SignupRequest
		}
		SendVerificationEmail []struct {
			Arg0 context.Context
			Arg1 *github_com_confluentinc_ccloud_sdk_go_v1_public.User
		}
	}
}

// Create mocks base method by wrapping the associated func.
func (m *Signup) Create(arg0 context.Context, arg1 *github_com_confluentinc_ccloud_sdk_go_v1_public.SignupRequest) (*github_com_confluentinc_ccloud_sdk_go_v1_public.SignupReply, error) {
	m.lockCreate.Lock()
	defer m.lockCreate.Unlock()

	if m.CreateFunc == nil {
		panic("mocker: Signup.CreateFunc is nil but Signup.Create was called.")
	}

	call := struct {
		Arg0 context.Context
		Arg1 *github_com_confluentinc_ccloud_sdk_go_v1_public.SignupRequest
	}{
		Arg0: arg0,
		Arg1: arg1,
	}

	m.calls.Create = append(m.calls.Create, call)

	return m.CreateFunc(arg0, arg1)
}

// CreateCalled returns true if Create was called at least once.
func (m *Signup) CreateCalled() bool {
	m.lockCreate.Lock()
	defer m.lockCreate.Unlock()

	return len(m.calls.Create) > 0
}

// CreateCalls returns the calls made to Create.
func (m *Signup) CreateCalls() []struct {
	Arg0 context.Context
	Arg1 *github_com_confluentinc_ccloud_sdk_go_v1_public.SignupRequest
} {
	m.lockCreate.Lock()
	defer m.lockCreate.Unlock()

	return m.calls.Create
}

// SendVerificationEmail mocks base method by wrapping the associated func.
func (m *Signup) SendVerificationEmail(arg0 context.Context, arg1 *github_com_confluentinc_ccloud_sdk_go_v1_public.User) error {
	m.lockSendVerificationEmail.Lock()
	defer m.lockSendVerificationEmail.Unlock()

	if m.SendVerificationEmailFunc == nil {
		panic("mocker: Signup.SendVerificationEmailFunc is nil but Signup.SendVerificationEmail was called.")
	}

	call := struct {
		Arg0 context.Context
		Arg1 *github_com_confluentinc_ccloud_sdk_go_v1_public.User
	}{
		Arg0: arg0,
		Arg1: arg1,
	}

	m.calls.SendVerificationEmail = append(m.calls.SendVerificationEmail, call)

	return m.SendVerificationEmailFunc(arg0, arg1)
}

// SendVerificationEmailCalled returns true if SendVerificationEmail was called at least once.
func (m *Signup) SendVerificationEmailCalled() bool {
	m.lockSendVerificationEmail.Lock()
	defer m.lockSendVerificationEmail.Unlock()

	return len(m.calls.SendVerificationEmail) > 0
}

// SendVerificationEmailCalls returns the calls made to SendVerificationEmail.
func (m *Signup) SendVerificationEmailCalls() []struct {
	Arg0 context.Context
	Arg1 *github_com_confluentinc_ccloud_sdk_go_v1_public.User
} {
	m.lockSendVerificationEmail.Lock()
	defer m.lockSendVerificationEmail.Unlock()

	return m.calls.SendVerificationEmail
}

// Reset resets the calls made to the mocked methods.
func (m *Signup) Reset() {
	m.lockCreate.Lock()
	m.calls.Create = nil
	m.lockCreate.Unlock()
	m.lockSendVerificationEmail.Lock()
	m.calls.SendVerificationEmail = nil
	m.lockSendVerificationEmail.Unlock()
}
