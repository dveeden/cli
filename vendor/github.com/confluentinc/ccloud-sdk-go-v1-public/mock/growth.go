// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: interfaces.go

package mock

import (
	context "context"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v1_public "github.com/confluentinc/ccloud-sdk-go-v1-public"
)

// Growth is a mock of Growth interface
type Growth struct {
	lockGetFreeTrialInfo sync.Mutex
	GetFreeTrialInfoFunc func(arg0 context.Context, arg1 int32) ([]*github_com_confluentinc_ccloud_sdk_go_v1_public.GrowthPromoCodeClaim, error)

	calls struct {
		GetFreeTrialInfo []struct {
			Arg0 context.Context
			Arg1 int32
		}
	}
}

// GetFreeTrialInfo mocks base method by wrapping the associated func.
func (m *Growth) GetFreeTrialInfo(arg0 context.Context, arg1 int32) ([]*github_com_confluentinc_ccloud_sdk_go_v1_public.GrowthPromoCodeClaim, error) {
	m.lockGetFreeTrialInfo.Lock()
	defer m.lockGetFreeTrialInfo.Unlock()

	if m.GetFreeTrialInfoFunc == nil {
		panic("mocker: Growth.GetFreeTrialInfoFunc is nil but Growth.GetFreeTrialInfo was called.")
	}

	call := struct {
		Arg0 context.Context
		Arg1 int32
	}{
		Arg0: arg0,
		Arg1: arg1,
	}

	m.calls.GetFreeTrialInfo = append(m.calls.GetFreeTrialInfo, call)

	return m.GetFreeTrialInfoFunc(arg0, arg1)
}

// GetFreeTrialInfoCalled returns true if GetFreeTrialInfo was called at least once.
func (m *Growth) GetFreeTrialInfoCalled() bool {
	m.lockGetFreeTrialInfo.Lock()
	defer m.lockGetFreeTrialInfo.Unlock()

	return len(m.calls.GetFreeTrialInfo) > 0
}

// GetFreeTrialInfoCalls returns the calls made to GetFreeTrialInfo.
func (m *Growth) GetFreeTrialInfoCalls() []struct {
	Arg0 context.Context
	Arg1 int32
} {
	m.lockGetFreeTrialInfo.Lock()
	defer m.lockGetFreeTrialInfo.Unlock()

	return m.calls.GetFreeTrialInfo
}

// Reset resets the calls made to the mocked methods.
func (m *Growth) Reset() {
	m.lockGetFreeTrialInfo.Lock()
	m.calls.GetFreeTrialInfo = nil
	m.lockGetFreeTrialInfo.Unlock()
}
