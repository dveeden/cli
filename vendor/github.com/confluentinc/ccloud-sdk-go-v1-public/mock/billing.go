// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: interfaces.go

package mock

import (
	context "context"
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v1_public "github.com/confluentinc/ccloud-sdk-go-v1-public"
)

// Billing is a mock of Billing interface
type Billing struct {
	lockGetPriceTable sync.Mutex
	GetPriceTableFunc func(ctx context.Context, org *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization, product string) (*github_com_confluentinc_ccloud_sdk_go_v1_public.PriceTable, error)

	lockGetPaymentInfo sync.Mutex
	GetPaymentInfoFunc func(ctx context.Context, org *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization) (*github_com_confluentinc_ccloud_sdk_go_v1_public.Card, error)

	lockUpdatePaymentInfo sync.Mutex
	UpdatePaymentInfoFunc func(ctx context.Context, org *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization, stripeToken string) error

	lockClaimPromoCode sync.Mutex
	ClaimPromoCodeFunc func(ctx context.Context, org *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization, code string) (*github_com_confluentinc_ccloud_sdk_go_v1_public.PromoCodeClaim, error)

	lockGetClaimedPromoCodes sync.Mutex
	GetClaimedPromoCodesFunc func(ctx context.Context, org *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization, excludeExpired bool) ([]*github_com_confluentinc_ccloud_sdk_go_v1_public.PromoCodeClaim, error)

	calls struct {
		GetPriceTable []struct {
			Ctx     context.Context
			Org     *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization
			Product string
		}
		GetPaymentInfo []struct {
			Ctx context.Context
			Org *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization
		}
		UpdatePaymentInfo []struct {
			Ctx         context.Context
			Org         *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization
			StripeToken string
		}
		ClaimPromoCode []struct {
			Ctx  context.Context
			Org  *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization
			Code string
		}
		GetClaimedPromoCodes []struct {
			Ctx            context.Context
			Org            *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization
			ExcludeExpired bool
		}
	}
}

// GetPriceTable mocks base method by wrapping the associated func.
func (m *Billing) GetPriceTable(ctx context.Context, org *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization, product string) (*github_com_confluentinc_ccloud_sdk_go_v1_public.PriceTable, error) {
	m.lockGetPriceTable.Lock()
	defer m.lockGetPriceTable.Unlock()

	if m.GetPriceTableFunc == nil {
		panic("mocker: Billing.GetPriceTableFunc is nil but Billing.GetPriceTable was called.")
	}

	call := struct {
		Ctx     context.Context
		Org     *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization
		Product string
	}{
		Ctx:     ctx,
		Org:     org,
		Product: product,
	}

	m.calls.GetPriceTable = append(m.calls.GetPriceTable, call)

	return m.GetPriceTableFunc(ctx, org, product)
}

// GetPriceTableCalled returns true if GetPriceTable was called at least once.
func (m *Billing) GetPriceTableCalled() bool {
	m.lockGetPriceTable.Lock()
	defer m.lockGetPriceTable.Unlock()

	return len(m.calls.GetPriceTable) > 0
}

// GetPriceTableCalls returns the calls made to GetPriceTable.
func (m *Billing) GetPriceTableCalls() []struct {
	Ctx     context.Context
	Org     *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization
	Product string
} {
	m.lockGetPriceTable.Lock()
	defer m.lockGetPriceTable.Unlock()

	return m.calls.GetPriceTable
}

// GetPaymentInfo mocks base method by wrapping the associated func.
func (m *Billing) GetPaymentInfo(ctx context.Context, org *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization) (*github_com_confluentinc_ccloud_sdk_go_v1_public.Card, error) {
	m.lockGetPaymentInfo.Lock()
	defer m.lockGetPaymentInfo.Unlock()

	if m.GetPaymentInfoFunc == nil {
		panic("mocker: Billing.GetPaymentInfoFunc is nil but Billing.GetPaymentInfo was called.")
	}

	call := struct {
		Ctx context.Context
		Org *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization
	}{
		Ctx: ctx,
		Org: org,
	}

	m.calls.GetPaymentInfo = append(m.calls.GetPaymentInfo, call)

	return m.GetPaymentInfoFunc(ctx, org)
}

// GetPaymentInfoCalled returns true if GetPaymentInfo was called at least once.
func (m *Billing) GetPaymentInfoCalled() bool {
	m.lockGetPaymentInfo.Lock()
	defer m.lockGetPaymentInfo.Unlock()

	return len(m.calls.GetPaymentInfo) > 0
}

// GetPaymentInfoCalls returns the calls made to GetPaymentInfo.
func (m *Billing) GetPaymentInfoCalls() []struct {
	Ctx context.Context
	Org *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization
} {
	m.lockGetPaymentInfo.Lock()
	defer m.lockGetPaymentInfo.Unlock()

	return m.calls.GetPaymentInfo
}

// UpdatePaymentInfo mocks base method by wrapping the associated func.
func (m *Billing) UpdatePaymentInfo(ctx context.Context, org *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization, stripeToken string) error {
	m.lockUpdatePaymentInfo.Lock()
	defer m.lockUpdatePaymentInfo.Unlock()

	if m.UpdatePaymentInfoFunc == nil {
		panic("mocker: Billing.UpdatePaymentInfoFunc is nil but Billing.UpdatePaymentInfo was called.")
	}

	call := struct {
		Ctx         context.Context
		Org         *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization
		StripeToken string
	}{
		Ctx:         ctx,
		Org:         org,
		StripeToken: stripeToken,
	}

	m.calls.UpdatePaymentInfo = append(m.calls.UpdatePaymentInfo, call)

	return m.UpdatePaymentInfoFunc(ctx, org, stripeToken)
}

// UpdatePaymentInfoCalled returns true if UpdatePaymentInfo was called at least once.
func (m *Billing) UpdatePaymentInfoCalled() bool {
	m.lockUpdatePaymentInfo.Lock()
	defer m.lockUpdatePaymentInfo.Unlock()

	return len(m.calls.UpdatePaymentInfo) > 0
}

// UpdatePaymentInfoCalls returns the calls made to UpdatePaymentInfo.
func (m *Billing) UpdatePaymentInfoCalls() []struct {
	Ctx         context.Context
	Org         *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization
	StripeToken string
} {
	m.lockUpdatePaymentInfo.Lock()
	defer m.lockUpdatePaymentInfo.Unlock()

	return m.calls.UpdatePaymentInfo
}

// ClaimPromoCode mocks base method by wrapping the associated func.
func (m *Billing) ClaimPromoCode(ctx context.Context, org *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization, code string) (*github_com_confluentinc_ccloud_sdk_go_v1_public.PromoCodeClaim, error) {
	m.lockClaimPromoCode.Lock()
	defer m.lockClaimPromoCode.Unlock()

	if m.ClaimPromoCodeFunc == nil {
		panic("mocker: Billing.ClaimPromoCodeFunc is nil but Billing.ClaimPromoCode was called.")
	}

	call := struct {
		Ctx  context.Context
		Org  *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization
		Code string
	}{
		Ctx:  ctx,
		Org:  org,
		Code: code,
	}

	m.calls.ClaimPromoCode = append(m.calls.ClaimPromoCode, call)

	return m.ClaimPromoCodeFunc(ctx, org, code)
}

// ClaimPromoCodeCalled returns true if ClaimPromoCode was called at least once.
func (m *Billing) ClaimPromoCodeCalled() bool {
	m.lockClaimPromoCode.Lock()
	defer m.lockClaimPromoCode.Unlock()

	return len(m.calls.ClaimPromoCode) > 0
}

// ClaimPromoCodeCalls returns the calls made to ClaimPromoCode.
func (m *Billing) ClaimPromoCodeCalls() []struct {
	Ctx  context.Context
	Org  *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization
	Code string
} {
	m.lockClaimPromoCode.Lock()
	defer m.lockClaimPromoCode.Unlock()

	return m.calls.ClaimPromoCode
}

// GetClaimedPromoCodes mocks base method by wrapping the associated func.
func (m *Billing) GetClaimedPromoCodes(ctx context.Context, org *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization, excludeExpired bool) ([]*github_com_confluentinc_ccloud_sdk_go_v1_public.PromoCodeClaim, error) {
	m.lockGetClaimedPromoCodes.Lock()
	defer m.lockGetClaimedPromoCodes.Unlock()

	if m.GetClaimedPromoCodesFunc == nil {
		panic("mocker: Billing.GetClaimedPromoCodesFunc is nil but Billing.GetClaimedPromoCodes was called.")
	}

	call := struct {
		Ctx            context.Context
		Org            *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization
		ExcludeExpired bool
	}{
		Ctx:            ctx,
		Org:            org,
		ExcludeExpired: excludeExpired,
	}

	m.calls.GetClaimedPromoCodes = append(m.calls.GetClaimedPromoCodes, call)

	return m.GetClaimedPromoCodesFunc(ctx, org, excludeExpired)
}

// GetClaimedPromoCodesCalled returns true if GetClaimedPromoCodes was called at least once.
func (m *Billing) GetClaimedPromoCodesCalled() bool {
	m.lockGetClaimedPromoCodes.Lock()
	defer m.lockGetClaimedPromoCodes.Unlock()

	return len(m.calls.GetClaimedPromoCodes) > 0
}

// GetClaimedPromoCodesCalls returns the calls made to GetClaimedPromoCodes.
func (m *Billing) GetClaimedPromoCodesCalls() []struct {
	Ctx            context.Context
	Org            *github_com_confluentinc_ccloud_sdk_go_v1_public.Organization
	ExcludeExpired bool
} {
	m.lockGetClaimedPromoCodes.Lock()
	defer m.lockGetClaimedPromoCodes.Unlock()

	return m.calls.GetClaimedPromoCodes
}

// Reset resets the calls made to the mocked methods.
func (m *Billing) Reset() {
	m.lockGetPriceTable.Lock()
	m.calls.GetPriceTable = nil
	m.lockGetPriceTable.Unlock()
	m.lockGetPaymentInfo.Lock()
	m.calls.GetPaymentInfo = nil
	m.lockGetPaymentInfo.Unlock()
	m.lockUpdatePaymentInfo.Lock()
	m.calls.UpdatePaymentInfo = nil
	m.lockUpdatePaymentInfo.Unlock()
	m.lockClaimPromoCode.Lock()
	m.calls.ClaimPromoCode = nil
	m.lockClaimPromoCode.Unlock()
	m.lockGetClaimedPromoCodes.Lock()
	m.calls.GetClaimedPromoCodes = nil
	m.lockGetClaimedPromoCodes.Unlock()
}
