// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shared/connect/connect.proto

package connect

import (
	context "context"
	fmt "fmt"
	v1 "github.com/confluentinc/ccloudapis/connect/v1"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("shared/connect/connect.proto", fileDescriptor_82bf984e387a263f) }

var fileDescriptor_82bf984e387a263f = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcd, 0x4a, 0x03, 0x31,
	0x14, 0x85, 0x15, 0xb4, 0x95, 0x20, 0x2e, 0xb2, 0x2c, 0xae, 0xdc, 0x9b, 0x69, 0x3b, 0x28, 0x82,
	0xcb, 0x29, 0xb8, 0x71, 0x65, 0xf1, 0x01, 0x66, 0x32, 0x57, 0x1b, 0x8d, 0x49, 0x4c, 0x6e, 0x0a,
	0x6e, 0x5c, 0xf8, 0xa2, 0xbe, 0x8a, 0xd8, 0xdb, 0x58, 0x14, 0xdb, 0xf9, 0x59, 0x0d, 0x33, 0x73,
	0xbe, 0xf3, 0x1d, 0x48, 0xd8, 0x69, 0x58, 0x94, 0x1e, 0xea, 0x4c, 0x5a, 0x63, 0x40, 0x62, 0x7a,
	0x0a, 0xe7, 0x2d, 0x5a, 0x3e, 0x5c, 0xbf, 0x8e, 0xae, 0x1f, 0x15, 0x2e, 0x62, 0x25, 0xa4, 0x7d,
	0xf9, 0x8e, 0x3c, 0xe8, 0x08, 0x06, 0x95, 0x91, 0x99, 0x94, 0xda, 0xc6, 0xba, 0x74, 0x2a, 0xfc,
	0x54, 0x2c, 0x27, 0xbf, 0x5b, 0xa6, 0x9f, 0x87, 0x6c, 0x58, 0xd0, 0x17, 0xfe, 0xc4, 0x0e, 0x6e,
	0x55, 0x40, 0x3e, 0x16, 0x1b, 0x52, 0xa4, 0xf8, 0x72, 0x22, 0x6e, 0x00, 0xd7, 0xd1, 0x42, 0xc7,
	0x80, 0xe0, 0xc3, 0x1d, 0xbc, 0x46, 0x08, 0x38, 0x12, 0x1d, 0x08, 0xa7, 0xdf, 0xce, 0xf6, 0xb8,
	0x66, 0x47, 0x33, 0x08, 0xd2, 0xab, 0x0a, 0x78, 0xd6, 0x96, 0x4e, 0xba, 0xf3, 0xf6, 0x00, 0xd9,
	0xde, 0xd9, 0x49, 0xb2, 0xcd, 0xf3, 0xb9, 0x32, 0xcf, 0xfc, 0xa2, 0xb1, 0x82, 0x82, 0x7f, 0xcc,
	0x79, 0x57, 0x8c, 0xfc, 0x1f, 0xfb, 0xec, 0xb8, 0xf0, 0x50, 0x62, 0xd2, 0x5f, 0x6d, 0xe9, 0xa1,
	0xd0, 0xae, 0x05, 0x97, 0x3d, 0xc8, 0xcd, 0x88, 0x7b, 0x57, 0x37, 0x8f, 0xa0, 0x50, 0x9f, 0x11,
	0xbb, 0x48, 0x1a, 0xe1, 0xd8, 0x60, 0x06, 0x1a, 0x10, 0xf8, 0x74, 0x4b, 0x07, 0xfd, 0xfe, 0xff,
	0xe0, 0xc7, 0x9d, 0x98, 0x95, 0xb1, 0x1a, 0xac, 0x2e, 0x7a, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff,
	0xf7, 0x41, 0xcb, 0xa8, 0x4e, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConnectClient is the client API for Connect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConnectClient interface {
	List(ctx context.Context, in *v1.GetConnectClustersRequest, opts ...grpc.CallOption) (*v1.GetConnectClustersReply, error)
	Describe(ctx context.Context, in *v1.GetConnectClusterRequest, opts ...grpc.CallOption) (*v1.GetConnectClusterReply, error)
	DescribeS3Sink(ctx context.Context, in *v1.GetConnectS3SinkClusterRequest, opts ...grpc.CallOption) (*v1.GetConnectS3SinkClusterReply, error)
	CreateS3Sink(ctx context.Context, in *v1.CreateConnectS3SinkClusterRequest, opts ...grpc.CallOption) (*v1.CreateConnectS3SinkClusterReply, error)
	UpdateS3Sink(ctx context.Context, in *v1.UpdateConnectS3SinkClusterRequest, opts ...grpc.CallOption) (*v1.UpdateConnectS3SinkClusterReply, error)
	Delete(ctx context.Context, in *v1.DeleteConnectClusterRequest, opts ...grpc.CallOption) (*v1.DeleteConnectClusterReply, error)
}

type connectClient struct {
	cc *grpc.ClientConn
}

func NewConnectClient(cc *grpc.ClientConn) ConnectClient {
	return &connectClient{cc}
}

func (c *connectClient) List(ctx context.Context, in *v1.GetConnectClustersRequest, opts ...grpc.CallOption) (*v1.GetConnectClustersReply, error) {
	out := new(v1.GetConnectClustersReply)
	err := c.cc.Invoke(ctx, "/connect.Connect/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectClient) Describe(ctx context.Context, in *v1.GetConnectClusterRequest, opts ...grpc.CallOption) (*v1.GetConnectClusterReply, error) {
	out := new(v1.GetConnectClusterReply)
	err := c.cc.Invoke(ctx, "/connect.Connect/Describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectClient) DescribeS3Sink(ctx context.Context, in *v1.GetConnectS3SinkClusterRequest, opts ...grpc.CallOption) (*v1.GetConnectS3SinkClusterReply, error) {
	out := new(v1.GetConnectS3SinkClusterReply)
	err := c.cc.Invoke(ctx, "/connect.Connect/DescribeS3Sink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectClient) CreateS3Sink(ctx context.Context, in *v1.CreateConnectS3SinkClusterRequest, opts ...grpc.CallOption) (*v1.CreateConnectS3SinkClusterReply, error) {
	out := new(v1.CreateConnectS3SinkClusterReply)
	err := c.cc.Invoke(ctx, "/connect.Connect/CreateS3Sink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectClient) UpdateS3Sink(ctx context.Context, in *v1.UpdateConnectS3SinkClusterRequest, opts ...grpc.CallOption) (*v1.UpdateConnectS3SinkClusterReply, error) {
	out := new(v1.UpdateConnectS3SinkClusterReply)
	err := c.cc.Invoke(ctx, "/connect.Connect/UpdateS3Sink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectClient) Delete(ctx context.Context, in *v1.DeleteConnectClusterRequest, opts ...grpc.CallOption) (*v1.DeleteConnectClusterReply, error) {
	out := new(v1.DeleteConnectClusterReply)
	err := c.cc.Invoke(ctx, "/connect.Connect/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectServer is the server API for Connect service.
type ConnectServer interface {
	List(context.Context, *v1.GetConnectClustersRequest) (*v1.GetConnectClustersReply, error)
	Describe(context.Context, *v1.GetConnectClusterRequest) (*v1.GetConnectClusterReply, error)
	DescribeS3Sink(context.Context, *v1.GetConnectS3SinkClusterRequest) (*v1.GetConnectS3SinkClusterReply, error)
	CreateS3Sink(context.Context, *v1.CreateConnectS3SinkClusterRequest) (*v1.CreateConnectS3SinkClusterReply, error)
	UpdateS3Sink(context.Context, *v1.UpdateConnectS3SinkClusterRequest) (*v1.UpdateConnectS3SinkClusterReply, error)
	Delete(context.Context, *v1.DeleteConnectClusterRequest) (*v1.DeleteConnectClusterReply, error)
}

func RegisterConnectServer(s *grpc.Server, srv ConnectServer) {
	s.RegisterService(&_Connect_serviceDesc, srv)
}

func _Connect_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetConnectClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.Connect/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServer).List(ctx, req.(*v1.GetConnectClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetConnectClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.Connect/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServer).Describe(ctx, req.(*v1.GetConnectClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect_DescribeS3Sink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetConnectS3SinkClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServer).DescribeS3Sink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.Connect/DescribeS3Sink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServer).DescribeS3Sink(ctx, req.(*v1.GetConnectS3SinkClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect_CreateS3Sink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateConnectS3SinkClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServer).CreateS3Sink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.Connect/CreateS3Sink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServer).CreateS3Sink(ctx, req.(*v1.CreateConnectS3SinkClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect_UpdateS3Sink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdateConnectS3SinkClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServer).UpdateS3Sink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.Connect/UpdateS3Sink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServer).UpdateS3Sink(ctx, req.(*v1.UpdateConnectS3SinkClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteConnectClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.Connect/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServer).Delete(ctx, req.(*v1.DeleteConnectClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Connect_serviceDesc = grpc.ServiceDesc{
	ServiceName: "connect.Connect",
	HandlerType: (*ConnectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Connect_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Connect_Describe_Handler,
		},
		{
			MethodName: "DescribeS3Sink",
			Handler:    _Connect_DescribeS3Sink_Handler,
		},
		{
			MethodName: "CreateS3Sink",
			Handler:    _Connect_CreateS3Sink_Handler,
		},
		{
			MethodName: "UpdateS3Sink",
			Handler:    _Connect_UpdateS3Sink_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Connect_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shared/connect/connect.proto",
}
