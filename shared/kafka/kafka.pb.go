// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shared/kafka/kafka.proto

package kafka

import (
	context "context"
	fmt "fmt"
	v1 "github.com/confluentinc/ccloudapis/auth/v1"
	v11 "github.com/confluentinc/ccloudapis/kafka/v1"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("shared/kafka/kafka.proto", fileDescriptor_b0ecda75940a8ed4) }

var fileDescriptor_b0ecda75940a8ed4 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0x4f, 0xe2, 0x40,
	0x14, 0xc7, 0xf7, 0xb0, 0xb0, 0xcb, 0xec, 0x7a, 0x99, 0x93, 0xe1, 0xa6, 0x84, 0x10, 0x94, 0x0c,
	0x41, 0x63, 0x3c, 0x93, 0x92, 0x18, 0x43, 0x0f, 0xc6, 0x1f, 0x07, 0xbd, 0x68, 0x3b, 0x7d, 0xd8,
	0x09, 0x95, 0xd6, 0xce, 0x94, 0x84, 0xff, 0xdc, 0xa3, 0x69, 0x1f, 0xad, 0x43, 0xd2, 0x4e, 0xe7,
	0x02, 0x81, 0xf9, 0x7c, 0xbf, 0x9f, 0xce, 0x7b, 0x01, 0x72, 0x2c, 0x43, 0x2f, 0x85, 0x60, 0xba,
	0xf6, 0x56, 0x6b, 0x0f, 0x5f, 0x59, 0x92, 0xc6, 0x2a, 0xa6, 0x9d, 0xe2, 0x43, 0xff, 0xfa, 0x5d,
	0xa8, 0x30, 0xf3, 0x19, 0x8f, 0x3f, 0xa6, 0x3c, 0xde, 0xac, 0xa2, 0x0c, 0x36, 0x4a, 0x6c, 0xf8,
	0x94, 0xf3, 0x28, 0xce, 0x02, 0x2f, 0x11, 0x72, 0x1f, 0xde, 0xce, 0xf4, 0x7c, 0xff, 0xca, 0x22,
	0xe8, 0x65, 0x2a, 0xcc, 0x73, 0xf9, 0x3b, 0xc6, 0x2e, 0xbe, 0x7a, 0xa4, 0xb3, 0xcc, 0x6b, 0xe8,
	0x1b, 0xf9, 0xef, 0xa4, 0xe0, 0x29, 0x98, 0xdf, 0xdd, 0x2e, 0x61, 0x47, 0x47, 0xec, 0x27, 0xc9,
	0x8a, 0xc4, 0x76, 0xc6, 0xf6, 0x44, 0x22, 0x96, 0xb0, 0xbb, 0x87, 0xcf, 0x0c, 0xa4, 0xea, 0x0f,
	0xdb, 0xc1, 0x24, 0xda, 0x9d, 0xfe, 0xa2, 0x3e, 0xf9, 0xed, 0x0a, 0xa9, 0xe8, 0x44, 0x0f, 0xe0,
	0x1d, 0xb6, 0x33, 0x76, 0x03, 0xaa, 0x78, 0x10, 0x27, 0xca, 0xa4, 0x82, 0x54, 0x96, 0xf5, 0x67,
	0x96, 0x34, 0x3a, 0x02, 0xf2, 0x77, 0x01, 0x92, 0xa7, 0xc2, 0x07, 0x7a, 0x6e, 0x93, 0x2c, 0x35,
	0x63, 0x3b, 0x18, 0x2d, 0x21, 0xe9, 0xe2, 0x05, 0x29, 0xab, 0x8d, 0xe1, 0x61, 0x9d, 0x66, 0x62,
	0xcd, 0x57, 0xa6, 0x05, 0x44, 0xd0, 0x68, 0xc2, 0x43, 0x7b, 0x53, 0x1d, 0x8f, 0xa6, 0x17, 0x42,
	0xf2, 0xed, 0x3c, 0xc6, 0x89, 0xe0, 0x92, 0x0e, 0x6b, 0xd3, 0x15, 0x50, 0x4a, 0x06, 0x6d, 0x18,
	0x76, 0x03, 0x39, 0x2a, 0xb7, 0x52, 0x7c, 0x4f, 0xc7, 0x0d, 0x0f, 0xa7, 0x31, 0xa5, 0x62, 0x64,
	0x83, 0xa2, 0xe6, 0x95, 0xfc, 0xc3, 0x49, 0xa2, 0x64, 0x64, 0x98, 0xf5, 0x81, 0x62, 0xd8, 0x0e,
	0x56, 0x02, 0x1c, 0xa0, 0x49, 0xa0, 0x11, 0x66, 0xc1, 0x01, 0x58, 0x09, 0x9e, 0x92, 0xa0, 0xe5,
	0x06, 0x1a, 0x61, 0x16, 0x1c, 0x80, 0x28, 0x78, 0x20, 0x7f, 0xf2, 0xed, 0xcc, 0x1d, 0x97, 0x36,
	0xef, 0x6e, 0xee, 0xb8, 0x65, 0xf1, 0x89, 0x19, 0xc2, 0xd2, 0x67, 0xd2, 0xdb, 0xff, 0xde, 0x1d,
	0x97, 0x9a, 0x86, 0xa9, 0x15, 0x0f, 0xda, 0xb0, 0xaa, 0x1a, 0xc7, 0xd4, 0x5c, 0x5d, 0x9d, 0x9b,
	0xab, 0x35, 0xac, 0xa8, 0xf6, 0xbb, 0xc5, 0x3f, 0xe0, 0xe5, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x4f, 0x89, 0xaf, 0x8e, 0x94, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KafkaClient is the client API for Kafka service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KafkaClient interface {
	CreateAPIKey(ctx context.Context, in *v1.CreateApiKeyRequest, opts ...grpc.CallOption) (*v1.CreateApiKeyReply, error)
	List(ctx context.Context, in *v11.GetKafkaClustersRequest, opts ...grpc.CallOption) (*v11.GetKafkaClustersReply, error)
	Describe(ctx context.Context, in *v11.GetKafkaClusterRequest, opts ...grpc.CallOption) (*v11.GetKafkaClusterReply, error)
	Create(ctx context.Context, in *v11.CreateKafkaClusterRequest, opts ...grpc.CallOption) (*v11.CreateKafkaClusterReply, error)
	Delete(ctx context.Context, in *v11.DeleteKafkaClusterRequest, opts ...grpc.CallOption) (*v11.DeleteKafkaClusterReply, error)
	ListTopics(ctx context.Context, in *v11.ListTopicRequest, opts ...grpc.CallOption) (*v11.ListTopicReply, error)
	DescribeTopic(ctx context.Context, in *v11.DescribeTopicRequest, opts ...grpc.CallOption) (*v11.DescribeTopicReply, error)
	CreateTopic(ctx context.Context, in *v11.CreateTopicRequest, opts ...grpc.CallOption) (*v11.CreateTopicReply, error)
	DeleteTopic(ctx context.Context, in *v11.DeleteTopicRequest, opts ...grpc.CallOption) (*v11.DeleteTopicReply, error)
	UpdateTopic(ctx context.Context, in *v11.UpdateTopicRequest, opts ...grpc.CallOption) (*v11.UpdateTopicReply, error)
	ListACL(ctx context.Context, in *v11.ListACLRequest, opts ...grpc.CallOption) (*v11.ListACLReply, error)
	CreateACL(ctx context.Context, in *v11.CreateACLRequest, opts ...grpc.CallOption) (*v11.CreateACLReply, error)
	DeleteACL(ctx context.Context, in *v11.DeleteACLRequest, opts ...grpc.CallOption) (*v11.DeleteACLReply, error)
}

type kafkaClient struct {
	cc *grpc.ClientConn
}

func NewKafkaClient(cc *grpc.ClientConn) KafkaClient {
	return &kafkaClient{cc}
}

func (c *kafkaClient) CreateAPIKey(ctx context.Context, in *v1.CreateApiKeyRequest, opts ...grpc.CallOption) (*v1.CreateApiKeyReply, error) {
	out := new(v1.CreateApiKeyReply)
	err := c.cc.Invoke(ctx, "/kafka.Kafka/CreateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClient) List(ctx context.Context, in *v11.GetKafkaClustersRequest, opts ...grpc.CallOption) (*v11.GetKafkaClustersReply, error) {
	out := new(v11.GetKafkaClustersReply)
	err := c.cc.Invoke(ctx, "/kafka.Kafka/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClient) Describe(ctx context.Context, in *v11.GetKafkaClusterRequest, opts ...grpc.CallOption) (*v11.GetKafkaClusterReply, error) {
	out := new(v11.GetKafkaClusterReply)
	err := c.cc.Invoke(ctx, "/kafka.Kafka/Describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClient) Create(ctx context.Context, in *v11.CreateKafkaClusterRequest, opts ...grpc.CallOption) (*v11.CreateKafkaClusterReply, error) {
	out := new(v11.CreateKafkaClusterReply)
	err := c.cc.Invoke(ctx, "/kafka.Kafka/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClient) Delete(ctx context.Context, in *v11.DeleteKafkaClusterRequest, opts ...grpc.CallOption) (*v11.DeleteKafkaClusterReply, error) {
	out := new(v11.DeleteKafkaClusterReply)
	err := c.cc.Invoke(ctx, "/kafka.Kafka/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClient) ListTopics(ctx context.Context, in *v11.ListTopicRequest, opts ...grpc.CallOption) (*v11.ListTopicReply, error) {
	out := new(v11.ListTopicReply)
	err := c.cc.Invoke(ctx, "/kafka.Kafka/ListTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClient) DescribeTopic(ctx context.Context, in *v11.DescribeTopicRequest, opts ...grpc.CallOption) (*v11.DescribeTopicReply, error) {
	out := new(v11.DescribeTopicReply)
	err := c.cc.Invoke(ctx, "/kafka.Kafka/DescribeTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClient) CreateTopic(ctx context.Context, in *v11.CreateTopicRequest, opts ...grpc.CallOption) (*v11.CreateTopicReply, error) {
	out := new(v11.CreateTopicReply)
	err := c.cc.Invoke(ctx, "/kafka.Kafka/CreateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClient) DeleteTopic(ctx context.Context, in *v11.DeleteTopicRequest, opts ...grpc.CallOption) (*v11.DeleteTopicReply, error) {
	out := new(v11.DeleteTopicReply)
	err := c.cc.Invoke(ctx, "/kafka.Kafka/DeleteTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClient) UpdateTopic(ctx context.Context, in *v11.UpdateTopicRequest, opts ...grpc.CallOption) (*v11.UpdateTopicReply, error) {
	out := new(v11.UpdateTopicReply)
	err := c.cc.Invoke(ctx, "/kafka.Kafka/UpdateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClient) ListACL(ctx context.Context, in *v11.ListACLRequest, opts ...grpc.CallOption) (*v11.ListACLReply, error) {
	out := new(v11.ListACLReply)
	err := c.cc.Invoke(ctx, "/kafka.Kafka/ListACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClient) CreateACL(ctx context.Context, in *v11.CreateACLRequest, opts ...grpc.CallOption) (*v11.CreateACLReply, error) {
	out := new(v11.CreateACLReply)
	err := c.cc.Invoke(ctx, "/kafka.Kafka/CreateACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaClient) DeleteACL(ctx context.Context, in *v11.DeleteACLRequest, opts ...grpc.CallOption) (*v11.DeleteACLReply, error) {
	out := new(v11.DeleteACLReply)
	err := c.cc.Invoke(ctx, "/kafka.Kafka/DeleteACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KafkaServer is the server API for Kafka service.
type KafkaServer interface {
	CreateAPIKey(context.Context, *v1.CreateApiKeyRequest) (*v1.CreateApiKeyReply, error)
	List(context.Context, *v11.GetKafkaClustersRequest) (*v11.GetKafkaClustersReply, error)
	Describe(context.Context, *v11.GetKafkaClusterRequest) (*v11.GetKafkaClusterReply, error)
	Create(context.Context, *v11.CreateKafkaClusterRequest) (*v11.CreateKafkaClusterReply, error)
	Delete(context.Context, *v11.DeleteKafkaClusterRequest) (*v11.DeleteKafkaClusterReply, error)
	ListTopics(context.Context, *v11.ListTopicRequest) (*v11.ListTopicReply, error)
	DescribeTopic(context.Context, *v11.DescribeTopicRequest) (*v11.DescribeTopicReply, error)
	CreateTopic(context.Context, *v11.CreateTopicRequest) (*v11.CreateTopicReply, error)
	DeleteTopic(context.Context, *v11.DeleteTopicRequest) (*v11.DeleteTopicReply, error)
	UpdateTopic(context.Context, *v11.UpdateTopicRequest) (*v11.UpdateTopicReply, error)
	ListACL(context.Context, *v11.ListACLRequest) (*v11.ListACLReply, error)
	CreateACL(context.Context, *v11.CreateACLRequest) (*v11.CreateACLReply, error)
	DeleteACL(context.Context, *v11.DeleteACLRequest) (*v11.DeleteACLReply, error)
}

func RegisterKafkaServer(s *grpc.Server, srv KafkaServer) {
	s.RegisterService(&_Kafka_serviceDesc, srv)
}

func _Kafka_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.Kafka/CreateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaServer).CreateAPIKey(ctx, req.(*v1.CreateApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kafka_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.GetKafkaClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.Kafka/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaServer).List(ctx, req.(*v11.GetKafkaClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kafka_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.GetKafkaClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.Kafka/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaServer).Describe(ctx, req.(*v11.GetKafkaClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kafka_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.CreateKafkaClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.Kafka/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaServer).Create(ctx, req.(*v11.CreateKafkaClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kafka_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.DeleteKafkaClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.Kafka/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaServer).Delete(ctx, req.(*v11.DeleteKafkaClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kafka_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.ListTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.Kafka/ListTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaServer).ListTopics(ctx, req.(*v11.ListTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kafka_DescribeTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.DescribeTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaServer).DescribeTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.Kafka/DescribeTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaServer).DescribeTopic(ctx, req.(*v11.DescribeTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kafka_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.Kafka/CreateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaServer).CreateTopic(ctx, req.(*v11.CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kafka_DeleteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.DeleteTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaServer).DeleteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.Kafka/DeleteTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaServer).DeleteTopic(ctx, req.(*v11.DeleteTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kafka_UpdateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.UpdateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaServer).UpdateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.Kafka/UpdateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaServer).UpdateTopic(ctx, req.(*v11.UpdateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kafka_ListACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.ListACLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaServer).ListACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.Kafka/ListACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaServer).ListACL(ctx, req.(*v11.ListACLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kafka_CreateACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.CreateACLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaServer).CreateACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.Kafka/CreateACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaServer).CreateACL(ctx, req.(*v11.CreateACLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kafka_DeleteACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.DeleteACLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaServer).DeleteACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.Kafka/DeleteACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaServer).DeleteACL(ctx, req.(*v11.DeleteACLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kafka_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kafka.Kafka",
	HandlerType: (*KafkaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAPIKey",
			Handler:    _Kafka_CreateAPIKey_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Kafka_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Kafka_Describe_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Kafka_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Kafka_Delete_Handler,
		},
		{
			MethodName: "ListTopics",
			Handler:    _Kafka_ListTopics_Handler,
		},
		{
			MethodName: "DescribeTopic",
			Handler:    _Kafka_DescribeTopic_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _Kafka_CreateTopic_Handler,
		},
		{
			MethodName: "DeleteTopic",
			Handler:    _Kafka_DeleteTopic_Handler,
		},
		{
			MethodName: "UpdateTopic",
			Handler:    _Kafka_UpdateTopic_Handler,
		},
		{
			MethodName: "ListACL",
			Handler:    _Kafka_ListACL_Handler,
		},
		{
			MethodName: "CreateACL",
			Handler:    _Kafka_CreateACL_Handler,
		},
		{
			MethodName: "DeleteACL",
			Handler:    _Kafka_DeleteACL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shared/kafka/kafka.proto",
}
